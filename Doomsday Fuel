'''
Doomsday Fuel
=============

Making fuel for the LAMBCHOP's reactor core is a tricky process because of the exotic matter involved. It starts as raw ore, then during
processing, begins randomly changing between forms, eventually reaching a stable form. There may be multiple stable forms that a sample 
could ultimately reach, not all of which are useful as fuel. 

Commander Lambda has tasked you to help the scientists increase fuel creation efficiency by predicting the end state of a given ore 
sample. You have carefully studied the different structures that the ore can take and which transitions it undergoes. It appears that, 
while random, the probability of each structure transforming is fixed. That is, each time the ore is in 1 state, it has the same 
probabilities of entering the next state (which might be the same state).  You have recorded the observed transitions in a matrix. 
The others in the lab have hypothesized more exotic forms that the ore can become, but you haven't seen all of them.

Write a function solution(m) that takes an array of array of nonnegative ints representing how many times that state has gone to the 
next state and return an array of ints for each terminal state giving the exact probabilities of each terminal state, represented as 
the numerator for each state, then the denominator for all of them at the end and in simplest form. The matrix is at most 10 by 10. 
It is guaranteed that no matter which state the ore is in, there is a path from that state to a terminal state. That is, the processing 
will always eventually end in a stable state. The ore starts in state 0. The denominator will fit within a signed 32-bit integer during 
the calculation, as long as the fraction is simplified regularly. 

For example, consider the matrix m:
[
  [0,1,0,0,0,1],  # s0, the initial state, goes to s1 and s5 with equal probability
  [4,0,0,3,2,0],  # s1 can become s0, s3, or s4, but with different probabilities
  [0,0,0,0,0,0],  # s2 is terminal, and unreachable (never observed in practice)
  [0,0,0,0,0,0],  # s3 is terminal
  [0,0,0,0,0,0],  # s4 is terminal
  [0,0,0,0,0,0],  # s5 is terminal
]
So, we can consider different paths to terminal states, such as:
s0 -> s1 -> s3
s0 -> s1 -> s0 -> s1 -> s0 -> s1 -> s4
s0 -> s1 -> s0 -> s5
Tracing the probabilities of each, we find that
s2 has probability 0
s3 has probability 3/14
s4 has probability 1/7
s5 has probability 9/14
So, putting that together, and making a common denominator, gives an answer in the form of
[s2.numerator, s3.numerator, s4.numerator, s5.numerator, denominator] which is
[0, 3, 2, 9, 14].

Languages
=========

To provide a Java solution, edit Solution.java
To provide a Python solution, edit solution.py

Test cases
==========
Your code should pass the following test cases.
Note that it may also be run against hidden test cases not shown here.

-- Java cases --
Input:
Solution.solution({{0, 2, 1, 0, 0}, {0, 0, 0, 3, 4}, {0, 0, 0, 0, 0}, {0, 0, 0, 0,0}, {0, 0, 0, 0, 0}})
Output:
    [7, 6, 8, 21]

Input:
Solution.solution({{0, 1, 0, 0, 0, 1}, {4, 0, 0, 3, 2, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}})
Output:
    [0, 3, 2, 9, 14]

-- Python cases --
Input:
solution.solution([[0, 2, 1, 0, 0], [0, 0, 0, 3, 4], [0, 0, 0, 0, 0], [0, 0, 0, 0,0], [0, 0, 0, 0, 0]])
Output:
    [7, 6, 8, 21]

Input:
solution.solution([[0, 1, 0, 0, 0, 1], [4, 0, 0, 3, 2, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]])
Output:
    [0, 3, 2, 9, 14]

Use verify [file] to test your solution and see how it does. When you are finished editing your code, use submit [file] to submit your 
answer. If your solution passes the test cases, it will be removed from your home folder.
'''


from fractions import Fraction
from functools import reduce
from math import gcd


def solution(m):
    # Checks if s0 is absorbant state
    if reduce(lambda a, b: a + b, m[0]) == 0:
        return [1, 1]

    # Creates an nxn identity matrix
    def create_identity_matrix(n):
        result = []
        for i in range(n):
            row = [0] * n
            row[i] = 1
            result.append(row)
        return result

    # Calculates m1 - m2
    def matrix_subtraction(m1, m2):
        rows = len(m1)
        cols = len(m1[0])
        result = []
        for i in range(rows):
            dif_row = []
            m1_row = m1[i]
            m2_row = m2[i]
            for j in range(cols):
                dif_entry = m1_row[j] - m2_row[j]
                dif_row.append(dif_entry)
            result.append(dif_row)
        return result

    # Calculates m1 * m2
    def matrix_multiplication(m1, m2):
        rows = len(m1)
        cols = len(m1[0])
        res = len(m2[0])
        result = []
        for i in range(rows):
            prod_row = []
            m1_row = m1[i]
            for j in range(res):
                prod_entry = 0
                for k in range(cols):
                    prod_entry += m1_row[k] * m2[k][j]
                prod_row.append(prod_entry)
            result.append(prod_row)
        return result

    # Inverts invertible matrix m with main diagonal entries != 0
    def matrix_inverse(m):
        original = m
        rows = len(original)
        result = create_identity_matrix(rows)

        # Row echelon
        for i in range(rows):
            base_row_original = original[i]
            base_row_result = result[i]
            coef = Fraction(base_row_original[i].denominator, base_row_original[i].numerator)
            base_row_original = list(map(lambda x: x * coef, base_row_original))
            base_row_result = list(map(lambda x: x * coef, base_row_result))
            original[i] = base_row_original
            result[i] = base_row_result
            for j in range(i + 1, rows):
                check_row_original = original[j]
                check_row_result = result[j]
                pivot = check_row_original[i]
                if pivot == 0:
                    pass
                else:
                    for k in range(rows):
                        check_row_original[k] -= pivot * base_row_original[k]
                        check_row_result[k] -= pivot * base_row_result[k]
                original[j] = check_row_original
                result[j] = check_row_result
        # Reduced row echelon
        for i in range(len(result) - 1, 0, -1):
            base_row_result = result[i]
            for j in range(i):
                coef = Fraction(original[j][i])
                check_row_result = result[j]
                for k in range(len(check_row_result)):
                    check_row_result[k] -= coef * base_row_result[k]
                result[j] = check_row_result
        return result

    # Calculates lowest common multiple from a list of integers
    def lcm(l):
        return reduce(lambda a, b: a * b // gcd(a, b), l)

    # q - list of indices of transition states
    # Q - transition matrix of transient state to transient state
    # R - transition matrix of transient state to absorbant state
    q = []
    Q = []
    R = []

    # Calculates transition matrix m, populates q
    for i in range(len(m)):
        row = m[i]
        row_sum = reduce(lambda a, b: a + b, row)
        if row_sum == 0:
            m[i][i] = Fraction(1)
        else:
            q.append(i)
            m[i] = list(map(lambda a: Fraction(a, row_sum), row))

    # Populates Q and R
    for i in q:
        row = m[i]
        Q_row = []
        R_row = []
        for j in range(len(row)):
            if j in q:
                Q_row.append(row[j])
            else:
                R_row.append(row[j])
        Q.append(Q_row)
        R.append(R_row)

    # N - matrix of expected values
    # B - (i, j) entry is the probability of reaching absorbing state j starting at state i
    N = matrix_inverse(matrix_subtraction(create_identity_matrix(len(q)), Q))
    B = matrix_multiplication(N, R)

    # Finding lcm of the denominators of B[0]
    denom_list = list(map(lambda a: a.denominator, B[0]))
    denominator = lcm(denom_list)

    # ans is factored B[0] fractions with denominator appended
    ans = list(map(lambda a: a.numerator * denominator // a.denominator, B[0]))
    ans.append(denominator)
    return ans
